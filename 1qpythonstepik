n = int(input())
count = 0
total= 0
while (count < n):
   count = count + 1
   total = total + int(input())
print(total)

------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
uniqueObjects = []
for obj in objects:
    isAdd = True
    for unique in uniqueObjects:
        if unique is obj:
            isAdd = False
    if isAdd:
        uniqueObjects.append(obj)

ans = 0
for obj in uniqueObjects: 
    ans += 1
print(ans)
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
def closest_mod_5(x):
    if x % 5 == 0:
        return (x)
    else:
        return (x + 5 - x % 5) 
        ------------------------------------------------------------------------------------------------------------------------------------------------
        ------------------------------------------------------------------------------------------------------------------------------------------------
        ------------------------------------------------------------------------------------------------------------------------------------------------
def C(n, k):
    if k == 0:
        return 1
    elif k > n:
        return 0
    else:
        return C(n - 1, k) + C(n - 1, k - 1)

n, k = map(int, input().split())
print(C(n, k))
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
import sys

root = { 'global' : {} }

def searchNamespace(node, keyword):
    for name in node:
        if type(node[name]) is dict:
            if name == keyword:
                return node[keyword]
    for name in node:
        if type(node[name]) is dict:
            result = searchNamespace(node[name], keyword)
            if result is None:
                continue
            else:
                return result
    return None

# создать новое пространство имен с именем <namespace> внутри пространства <parent>
def create(namespace, parent):
    parentNamespace = searchNamespace(root, parent)
    parentNamespace[namespace] = {}

# добавить в пространство <namespace> переменную <var>
def add(namespace, var):
    targetNamespace = searchNamespace(root, namespace)
    targetNamespace[var] = None

def searchVar(node, keyword, nodeName):
    for name in node:
        if node[name] is None:
            if name == keyword:
                return nodeName
    return None

def searchParent(node, child, nodeName):
    for name in node:
        if node[name] is child:
            return nodeName
        elif type(node[name]) is dict:
            result = searchParent(node[name], child, name)
            if result is None:
                continue
            else:
                return result
    return None

# получить имя пространства, из которого будет взята переменная <var> при запросе из
# пространства <namespace>, или None, если такого пространства не сущет
def get(namespace, var):
    targetNamespace = searchNamespace(root, namespace)
    if targetNamespace is None:
        return None
    else:
        result = searchVar(targetNamespace, var, namespace)
        # print('result = ', result)
        if (result is None) and (namespace != 'global'):
            parent = searchParent(root['global'], targetNamespace, 'global')
            result = get(parent, var)
        return result

def test():
    add('global', 'a')
    create('foo', 'global')
    add('foo', 'b')
    print(get('foo', 'a')) # global
    print(get('foo', 'c')) # None
    create('bar', 'foo')
    add('bar', 'a')
    print(get('bar', 'a')) # bar
    print(get('bar', 'b')) # foo
    # print('global =', searchNamespace(root, 'global'))
# test()

def main():
    n = int(sys.stdin.readline())
    while n > 0:
        cmd, ns, arg = map(str, sys.stdin.readline().split())
        if cmd == 'create':
            create(ns, arg)
        elif cmd == 'add':
            add(ns, arg)
        elif cmd == 'get':
            print(get(ns, arg))
        n = n - 1

main()
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity
        self.count = 0

    def can_add(self, v):
        return self.count + v <= self.capacity

    def add(self, v):
        if self.can_add(v):
            self.count += v
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
class Buffer:
    def __init__(self):
        # конструктор без аргументов
        self.lst = list()

    def add(self, *a):
        # добавить следующую часть последовательности
        for value in a:
            self.lst.append(value)

        while len(self.lst) >= 5:
            s = 0
            for i in range(5):
                s += self.lst.pop(0)
            print(s)

    def get_current_part(self):
        # вернуть сохраненные в текущий момент элементы последовательности в порядке, в котором они были добавлены
        return self.lst
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
classes = {}

for i in range(int(input())):
    data = input().split(' : ')

    if len(data) == 1:
        data.append('')

    classes[data[0]] = data[1].split()

    for j in classes[data[0]]:
        if j not in classes:
            classes[j] = []


def is_parent(child, parent):
    if parent in classes[child] or child == parent:
        return True

    if len(classes[child]):
        return any(map(lambda x: is_parent(x, parent), classes[child]))


for _ in range(int(input())):
    data = input().split()
    print('Yes' if is_parent(data[1], data[0]) else 'No')
    ------------------------------------------------------------------------------------------------------------------------------------------------
    ------------------------------------------------------------------------------------------------------------------------------------------------
    ------------------------------------------------------------------------------------------------------------------------------------------------
class ExtendedStack(list):
    def sum(self):
        self.append(self.pop() + self.pop())

    def sub(self):
        self.append(self.pop() - self.pop())

    def mul(self):
        self.append(self.pop() * self.pop())

    def div(self):
        self.append(self.pop() // self.pop())
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
class LoggableList(list, Loggable):
    def append(self, item):
        super().append(item)
        self.log(item)
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
        
        
 try:
    foo()
except ZeroDivisionError as e:
    print("ZeroDivisionError")
except AssertionError as e:
    print("AssertionError")
except ArithmeticError as e:
    print("ArithmeticError")
    
 ------------------------------------------------------------------------------------------------------------------------------------------------
 ------------------------------------------------------------------------------------------------------------------------------------------------
 ------------------------------------------------------------------------------------------------------------------------------------------------
    
    
    def been_catched(error):
    if error in catched:
        return True

    if len(errors[error]):
        return any(map(lambda x: been_catched(x), errors[error]))

    return False


errors = {}

for i in range(int(input())):
    data = input().split(' : ')
    if len(data) == 1:
        data.append("")

    errors[data[0]] = data[1].split()
    for j in errors[data[0]]:
        if j not in errors:
            errors[j] = []

catched = []

for _ in range(int(input())):
    error = input()
    if been_catched(error):
        print(error)
    else:
        catched.append(error)
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
class NonPositiveError(ValueError):
    pass
class PositiveList(list):
    def append(self, x):
        if x > 0:
            super(PositiveList, self).append(x)
        else:
            raise NonPositiveError







